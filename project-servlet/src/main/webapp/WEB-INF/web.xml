<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
	<!-- Listener配置信息必须在Filter和Servlet配置之前，Listener的初始化（ServletContentListener初始化）比Servlet和Filter都优先，而销毁比Servlet和Filter都慢。 -->
	<!-- 正确加载顺序：context-param -> listener -> filter -> servlet；与它们在 web.xml 文件中的先后顺序无关。即不会因为 filter 写在 listener 的前面而会先加载 filter。 -->
	
	<!-- 加载c3p0de配置信息，这个已经过时 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:c3p0-config.xml,
		</param-value>
	</context-param> 
	
	<!-- 监听器 -->
	<listener>
		<listener-class>com.saick.base.listener.MyServletContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>com.saick.base.listener.MyServletRequestListener</listener-class>
	</listener>
	<listener>
		<listener-class>com.saick.base.listener.MyHttpSessionListener</listener-class>
	</listener>
	<listener>
		<listener-class>com.saick.base.listener.KickUserListener</listener-class>
	</listener>
	<listener>
		<listener-class>com.saick.base.listener.UserOnlineListener</listener-class>
	</listener>

	<!-- HttpSession在web服务器中的存活时间，单位分钟 ，默认30分钟，web服务器就会删除该HttpSession对象 -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<!-- filter 映射配置 -->
	<filter>
		<filter-name>charGzipFilter</filter-name>
		<filter-class>com.saick.base.filter.CharGzipFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>charGzipFilter</filter-name>
		<url-pattern>/gzip/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>myCharacterEncodingFilter</filter-name>
		<filter-class>com.saick.base.filter.MyCharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>myCharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 过滤jsp等动态不需要缓存的资源即可,可以配置多个映射 -->
	<filter>
		<filter-name>noNeedCacheFilter</filter-name>
		<filter-class>com.saick.base.filter.NoNeedCacheFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>noNeedCacheFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<!-- 脏话过滤器 -->
	<filter>
		<filter-name>dirtyWordsFilter</filter-name>
		<filter-class>com.saick.base.filter.DirtyWordsFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>dirtyWordsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- HTML过滤器 -->
	<filter>
		<filter-name>htmlContendsFilter</filter-name>
		<filter-class>com.saick.base.filter.HTMLContendsFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>htmlContendsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- js等需要缓存的资源过滤器 -->
	<filter>
		<filter-name>needCacheFilter</filter-name>
		<filter-class>com.saick.base.filter.NeedCacheFilter</filter-class>
		<init-param>
			<param-name>html</param-name>
			<param-value>30</param-value>
		</init-param>
		<init-param>
			<param-name>css</param-name>
			<param-value>30</param-value>
		</init-param>
		<init-param>
			<param-name>js</param-name>
			<param-value>30</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>needCacheFilter</filter-name>
		<url-pattern>*.js</url-pattern>
		<url-pattern>*.html</url-pattern>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>ERROR</dispatcher>
	</filter-mapping>
	<filter-mapping>
		<filter-name>needCacheFilter</filter-name>
		<url-pattern>*.css</url-pattern>
	</filter-mapping>
	
	<!-- servlet 映射配置 -->
	<servlet>
		<servlet-name>autoLoginServlet</servlet-name>
		<servlet-class>com.saick.base.servlet.AutoLoginCheckServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>autoLoginServlet</servlet-name>
		<url-pattern>/login/login.jsp</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>kickUserServlet</servlet-name>
		<servlet-class>com.saick.base.servlet.KickUserServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>kickUserServlet</servlet-name>
		<url-pattern>/kick</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>masterServlet</servlet-name>
		<servlet-class>com.saick.base.servlet.MasterServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>masterServlet</servlet-name>
		<url-pattern>/master</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>myServlet</servlet-name>
		<servlet-class>com.saick.base.servlet.MyServlet</servlet-class>
		<!-- 这里定义的属性，可以在servlet中，通过ServletConfig对象进行读取 -->
		<init-param>
			<param-name>username</param-name>
			<param-value>LIUBAO</param-value>
		</init-param>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>myServlet</servlet-name>
		<url-pattern>/myServlet</url-pattern>
	</servlet-mapping>
	
	<!-- 可以显示一个错误页面 ，可以是一个图片 -->
	<error-page>
		<error-code>500</error-code>
		<location>/error.jpg</location>
	</error-page>

	<!-- 文件上传 -->
	<servlet>
	    <description>This is the description of my J2EE component</description>
	    <display-name>This is the display name of my J2EE component</display-name>
	    <servlet-name>uploadServlet</servlet-name>
	    <servlet-class>com.saick.base.upload.UploadServlet</servlet-class>
    </servlet>
	<servlet-mapping>
		<servlet-name>uploadServlet</servlet-name>
		<url-pattern>/uploadServlet</url-pattern>
	</servlet-mapping>
  
	<!-- 默认欢迎页面 -->
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

</web-app>
